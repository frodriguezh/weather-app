{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\frodriguez\\\\Documents\\\\react\\\\weather-app\\\\src\\\\components\\\\CityList\\\\CityList.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport convertUnits from 'convert-units';\nimport Alert from '@material-ui/lab/Alert';\nimport Grid from '@material-ui/core/Grid';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport CityInfo from './../CityInfo';\nimport Weather from './../Weather'; //funcion que retorna otra funcion\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst renderCityAndCountry = eventOnClickCity => (cityAndCountry, weather) => {\n  const {\n    city,\n    country\n  } = cityAndCountry;\n  return /*#__PURE__*/_jsxDEV(ListItem, {\n    button: true,\n    onClick: eventOnClickCity,\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 9,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(CityInfo, {\n          city: city,\n          country: country\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 10,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Weather, {\n          temperature: weather && weather.temperature,\n          state: weather && weather.state\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this)\n  }, city, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 9\n  }, this);\n};\n\nconst CityList = ({\n  cities,\n  onClickCity\n}) => {\n  _s();\n\n  const [allWeather, setAllWeather] = useState({});\n  const [error, setError] = useState();\n  useEffect(() => {\n    const setWeather = async (city, country, countryCode) => {\n      const appid = \"811bed139763af7e4f3428e936ed75fb\";\n      const url = `https://api.openweathermap.org/data/2.5/weather?q=${city},${countryCode}&appid=${appid}`;\n\n      try {\n        const response = await axios.get(url);\n        const {\n          data\n        } = response;\n        const temperature = Number(convertUnits(data.main.temp).from(\"K\").to(\"C\").toFixed(0));\n        const state = data.weather[0].main.toLowerCase();\n        const propName = `${city}-${country}`;\n        const propValue = {\n          temperature,\n          state\n        };\n        setAllWeather(allWeather => {\n          const result = { ...allWeather,\n            [propName]: propValue\n          };\n          return result;\n        });\n      } catch (error) {\n        if (error.response) {\n          setError(\"Hay un error con el servidor\");\n        } else if (error.request) {\n          setError(\"Sin internet\");\n        } else {\n          setError(\"Ponte a rezar\");\n        }\n      }\n    };\n\n    cities.forEach(({\n      city,\n      country,\n      countryCode\n    }) => {\n      setWeather(city, country, countryCode);\n    });\n  }, [cities]); //  const weather =  { temperature: 10, state: \"sunny\" }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [error && /*#__PURE__*/_jsxDEV(Alert, {\n      onClose: () => setError(null),\n      severity: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 26\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      children: cities.map(cityAndCountry => renderCityAndCountry(onClickCity)(cityAndCountry, allWeather[`${cityAndCountry.city}-${cityAndCountry.country}`]))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CityList, \"Np8lHz/1TqUHJA1rf43+prngUiA=\");\n\n_c = CityList;\nCityList.propTypes = {\n  cities: PropTypes.arrayOf(PropTypes.shape({\n    city: PropTypes.string.isRequired,\n    country: PropTypes.string.isRequired,\n    countryCode: PropTypes.string.isRequired\n  })).isRequired,\n  onClickCity: PropTypes.func.isRequired\n};\nexport default CityList;\n\nvar _c;\n\n$RefreshReg$(_c, \"CityList\");","map":{"version":3,"sources":["C:/Users/frodriguez/Documents/react/weather-app/src/components/CityList/CityList.jsx"],"names":["React","useState","useEffect","PropTypes","axios","convertUnits","Alert","Grid","List","ListItem","CityInfo","Weather","renderCityAndCountry","eventOnClickCity","cityAndCountry","weather","city","country","temperature","state","CityList","cities","onClickCity","allWeather","setAllWeather","error","setError","setWeather","countryCode","appid","url","response","get","data","Number","main","temp","from","to","toFixed","toLowerCase","propName","propValue","result","request","forEach","map","propTypes","arrayOf","shape","string","isRequired","func"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport axios from 'axios'\r\nimport convertUnits from 'convert-units'\r\nimport Alert from '@material-ui/lab/Alert'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport List from '@material-ui/core/List'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport CityInfo from './../CityInfo'\r\nimport Weather from './../Weather'\r\n\r\n//funcion que retorna otra funcion\r\nconst renderCityAndCountry = eventOnClickCity => (cityAndCountry , weather) => {\r\n\r\n    const { city, country } = cityAndCountry\r\n\r\n    return (\r\n    \r\n        <ListItem \r\n            button\r\n            key={city} \r\n            onClick={eventOnClickCity}>\r\n            <Grid container \r\n                justifyContent=\"center\" \r\n                alignItems=\"center\">\r\n\r\n                <Grid item md={9} xs={12}>\r\n                    <CityInfo city={city} country={country} />\r\n                </Grid>\r\n                \r\n                <Grid item md={10} xs={12}>\r\n\r\n                    <Weather \r\n                    temperature = {weather && weather.temperature} \r\n                    state={weather && weather.state} />\r\n\r\n                </Grid>\r\n\r\n            </Grid>\r\n        </ListItem>\r\n        \r\n    )\r\n\r\n}\r\n\r\nconst CityList = ({ cities, onClickCity }) => {\r\n\r\n    const [allWeather, setAllWeather] = useState({})\r\n    const [error, setError] = useState()\r\n\r\n    useEffect(() => {\r\n\r\n        const setWeather = async (city, country, countryCode) => {\r\n\r\n            const appid = \"811bed139763af7e4f3428e936ed75fb\"\r\n            const url = `https://api.openweathermap.org/data/2.5/weather?q=${city},${countryCode}&appid=${appid}`\r\n\r\n            try {\r\n\r\n                const response = await axios.get(url)\r\n                const { data } = response\r\n                const temperature = Number(convertUnits(data.main.temp).from(\"K\").to(\"C\").toFixed(0))\r\n                const state = data.weather[0].main.toLowerCase()\r\n                const propName = `${city}-${country}`\r\n                const propValue = { temperature , state }\r\n\r\n            setAllWeather(allWeather => {\r\n                const result = { ...allWeather, [propName] : propValue }\r\n                return result\r\n\r\n            })\r\n                \r\n            } catch (error) {\r\n\r\n                if(error.response){\r\n\r\n                    setError(\"Hay un error con el servidor\")\r\n    \r\n                }else if(error.request){\r\n    \r\n                    setError(\"Sin internet\")\r\n    \r\n                }else{\r\n    \r\n                    setError(\"Ponte a rezar\")\r\n                }\r\n    \r\n                \r\n            }   \r\n            \r\n        }\r\n\r\n        cities.forEach(({ city, country, countryCode }) => {\r\n\r\n            setWeather(city, country, countryCode)\r\n                \r\n        });\r\n        \r\n        \r\n        \r\n    }, [cities])\r\n\r\n    //  const weather =  { temperature: 10, state: \"sunny\" }\r\n    return (\r\n        <div>\r\n            {\r\n                \r\n                error && <Alert onClose={ () => setError(null)} severity=\"error\">{error}</Alert>\r\n         \r\n            }\r\n   \r\n            <List>\r\n            { \r\n                cities.map(cityAndCountry => renderCityAndCountry(onClickCity)(cityAndCountry, \r\n                    allWeather[`${cityAndCountry.city}-${cityAndCountry.country}`]))\r\n            }\r\n            </List>\r\n\r\n        </div>\r\n       \r\n    )\r\n}\r\n\r\nCityList.propTypes = {\r\n\r\n    cities: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n\r\n            city: PropTypes.string.isRequired,\r\n            country: PropTypes.string.isRequired,\r\n            countryCode: PropTypes.string.isRequired,\r\n        })\r\n    ).isRequired,\r\n\r\n    onClickCity: PropTypes.func.isRequired,\r\n\r\n}\r\n\r\nexport default CityList\r\n"]},"metadata":{},"sourceType":"module"}