{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\frodriguez\\\\Documents\\\\react\\\\weather-app\\\\src\\\\components\\\\CityList\\\\CityList.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Alert from '@material-ui/lab/Alert';\nimport Grid from '@material-ui/core/Grid';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport useCityList from './../../hooks/useCityList';\nimport CityInfo from './../CityInfo';\nimport Weather from './../Weather';\nimport { getCityCode } from './../../utils/utils'; //funcion que retorna otra funcion\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst renderCityAndCountry = eventOnClickCity => (cityAndCountry, weather) => {\n  const {\n    city,\n    countryCode,\n    country\n  } = cityAndCountry;\n  return /*#__PURE__*/_jsxDEV(ListItem, {\n    button: true,\n    onClick: () => eventOnClickCity(city, countryCode),\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 9,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(CityInfo, {\n          city: city,\n          country: country\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 10,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Weather, {\n          temperature: weather && weather.temperature,\n          state: weather && weather.state\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this)\n  }, getCityCode(city, countryCode), false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this);\n};\n\nconst CityList = ({\n  cities,\n  onClickCity,\n  onSetAllWeather,\n  allWeather\n}) => {\n  _s();\n\n  const {\n    error,\n    setError\n  } = useCityList(cities, onSetAllWeather);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [error && /*#__PURE__*/_jsxDEV(Alert, {\n      onClose: () => setError(null),\n      severity: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 26\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      children: cities.map(cityAndCountry => renderCityAndCountry(onClickCity)(cityAndCountry, allWeather[getCityCode(cityAndCountry.city, cityAndCountry.countryCode)]))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CityList, \"yILzZCRIsW+HXUwNG6oQDrWcxik=\", false, function () {\n  return [useCityList];\n});\n\n_c = CityList;\nCityList.propTypes = {\n  cities: PropTypes.arrayOf(PropTypes.shape({\n    city: PropTypes.string.isRequired,\n    country: PropTypes.string.isRequired,\n    countryCode: PropTypes.string.isRequired\n  })).isRequired,\n  onClickCity: PropTypes.func.isRequired\n};\nexport default CityList;\n\nvar _c;\n\n$RefreshReg$(_c, \"CityList\");","map":{"version":3,"sources":["C:/Users/frodriguez/Documents/react/weather-app/src/components/CityList/CityList.jsx"],"names":["React","PropTypes","Alert","Grid","List","ListItem","useCityList","CityInfo","Weather","getCityCode","renderCityAndCountry","eventOnClickCity","cityAndCountry","weather","city","countryCode","country","temperature","state","CityList","cities","onClickCity","onSetAllWeather","allWeather","error","setError","map","propTypes","arrayOf","shape","string","isRequired","func"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Alert from '@material-ui/lab/Alert'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport List from '@material-ui/core/List'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport useCityList from './../../hooks/useCityList'\r\nimport CityInfo from './../CityInfo'\r\nimport Weather from './../Weather'\r\nimport { getCityCode } from './../../utils/utils'\r\n\r\n\r\n//funcion que retorna otra funcion\r\nconst renderCityAndCountry = eventOnClickCity => (cityAndCountry , weather) => {\r\n\r\n    const { city, countryCode, country } = cityAndCountry\r\n\r\n    return (\r\n    \r\n        <ListItem \r\n            button\r\n            key={getCityCode(city, countryCode)} \r\n            onClick={()=> eventOnClickCity(city, countryCode)}>\r\n            <Grid container \r\n                justifyContent=\"center\" \r\n                alignItems=\"center\">\r\n\r\n                <Grid item md={9} xs={12}>\r\n                    <CityInfo city={city} country={country} />\r\n                </Grid>\r\n                \r\n                <Grid item md={10} xs={12}>\r\n\r\n                    <Weather \r\n                    temperature = {weather && weather.temperature} \r\n                    state={weather && weather.state} />\r\n\r\n                </Grid>\r\n\r\n            </Grid>\r\n        </ListItem>\r\n        \r\n    )\r\n\r\n}\r\n\r\n\r\nconst CityList = ({ cities, onClickCity, onSetAllWeather, allWeather }) => {\r\n\r\n    const { error, setError } = useCityList(cities, onSetAllWeather)\r\n\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                \r\n                error && <Alert onClose={ () => setError(null)} severity=\"error\">{error}</Alert>\r\n         \r\n            }\r\n   \r\n            <List>\r\n            { \r\n                cities.map(cityAndCountry => renderCityAndCountry(onClickCity)(cityAndCountry, \r\n                    allWeather[getCityCode(cityAndCountry.city, cityAndCountry.countryCode)]))\r\n            }\r\n            </List>\r\n\r\n        </div>\r\n       \r\n    )\r\n}\r\n\r\nCityList.propTypes = {\r\n\r\n    cities: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n\r\n            city: PropTypes.string.isRequired,\r\n            country: PropTypes.string.isRequired,\r\n            countryCode: PropTypes.string.isRequired,\r\n        })\r\n    ).isRequired,\r\n\r\n    onClickCity: PropTypes.func.isRequired,\r\n\r\n}\r\n\r\nexport default CityList\r\n"]},"metadata":{},"sourceType":"module"}