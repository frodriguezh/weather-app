{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\frodriguez\\\\Documents\\\\react\\\\weather-app\\\\src\\\\components\\\\CityList\\\\CityList.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport Grid from '@material-ui/core/Grid';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport CityInfo from './../CityInfo';\nimport Weather from './../Weather'; //funcion que retorna otra funcion\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst renderCityAndCountry = eventOnClickCity => (cityAndCountry, weather) => {\n  const {\n    city,\n    country\n  } = cityAndCountry; //const { temperature, state } = weather\n\n  return /*#__PURE__*/_jsxDEV(ListItem, {\n    button: true,\n    onClick: eventOnClickCity,\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 9,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(CityInfo, {\n          city: city,\n          country: country\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 10,\n        xs: 12,\n        children: weather ? /*#__PURE__*/_jsxDEV(Weather, {\n          temperature: weather.temperature,\n          state: weather.state\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 25\n        }, this) : \"No hay datos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this)\n  }, city, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this);\n};\n\nconst CityList = ({\n  cities,\n  onClickCity\n}) => {\n  _s();\n\n  const [allWeather, setAllWeather] = useState({});\n  useEffect(() => {\n    const setWeather = (city, country, countryCode) => {\n      const appid = \"811bed139763af7e4f3428e936ed75fb\";\n      const url = `https://api.openweathermap.org/data/2.5/weather?q=${city},${countryCode}&appid=${appid}`;\n      axios.get(url).then(response => {\n        const {\n          data\n        } = response;\n        const temperature = data.main.temp;\n        const state = \"sunny\";\n        const propName = `${city}-${country}`;\n        const propValue = {\n          temperature,\n          state\n        };\n        console.log(\"[propName]\", propName);\n        setAllWeather(allWeather => {\n          const result = { ...allWeather,\n            [propName]: propValue\n          };\n          console.log(\"allWeather [result]\", result);\n          return result;\n        });\n      });\n    };\n\n    cities.forEach(({\n      city,\n      country,\n      countryCode\n    }) => {\n      setWeather(city, country, countryCode);\n    });\n  }, [cities]); //  const weather =  { temperature: 10, state: \"sunny\" }\n\n  return /*#__PURE__*/_jsxDEV(List, {\n    children: cities.map(cityAndCountry => renderCityAndCountry(onClickCity)(cityAndCountry, allWeather[`${cityAndCountry.city}-${cityAndCountry.country}`]))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CityList, \"TPrlf75VKUWv3yN+JnaOgAVx92s=\");\n\n_c = CityList;\nCityList.propTypes = {\n  cities: PropTypes.arrayOf(PropTypes.shape({\n    city: PropTypes.string.isRequired,\n    country: PropTypes.string.isRequired,\n    countryCode: PropTypes.string.isRequired\n  })).isRequired,\n  onClickCity: PropTypes.func.isRequired\n};\nexport default CityList;\n\nvar _c;\n\n$RefreshReg$(_c, \"CityList\");","map":{"version":3,"sources":["C:/Users/frodriguez/Documents/react/weather-app/src/components/CityList/CityList.jsx"],"names":["React","useState","useEffect","PropTypes","axios","Grid","List","ListItem","CityInfo","Weather","renderCityAndCountry","eventOnClickCity","cityAndCountry","weather","city","country","temperature","state","CityList","cities","onClickCity","allWeather","setAllWeather","setWeather","countryCode","appid","url","get","then","response","data","main","temp","propName","propValue","console","log","result","forEach","map","propTypes","arrayOf","shape","string","isRequired","func"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport axios from 'axios'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport List from '@material-ui/core/List'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport CityInfo from './../CityInfo'\r\nimport Weather from './../Weather'\r\n\r\n//funcion que retorna otra funcion\r\nconst renderCityAndCountry = eventOnClickCity => (cityAndCountry , weather) => {\r\n\r\n    const { city, country } = cityAndCountry\r\n    //const { temperature, state } = weather\r\n\r\n    return (\r\n    \r\n        <ListItem \r\n            button\r\n            key={city} \r\n            onClick={eventOnClickCity}>\r\n            <Grid container \r\n                justifyContent=\"center\" \r\n                alignItems=\"center\">\r\n\r\n                <Grid item md={9} xs={12}>\r\n                    <CityInfo city={city} country={country} />\r\n                </Grid>\r\n                \r\n                <Grid item md={10} xs={12}>\r\n                    {\r\n                        weather ?\r\n                        <Weather \r\n                        temperature = {weather.temperature} \r\n                        state={weather.state} />\r\n                        :\r\n                        \"No hay datos\"\r\n                    }\r\n                </Grid>\r\n\r\n            </Grid>\r\n        </ListItem>\r\n        \r\n    )\r\n\r\n}\r\n\r\n\r\nconst CityList = ({ cities, onClickCity }) => {\r\n\r\n    const [allWeather, setAllWeather] = useState({})\r\n\r\n    useEffect(() => {\r\n\r\n        const setWeather = (city, country, countryCode) => {\r\n\r\n            const appid = \"811bed139763af7e4f3428e936ed75fb\"\r\n            const url = `https://api.openweathermap.org/data/2.5/weather?q=${city},${countryCode}&appid=${appid}`\r\n            axios\r\n            .get(url)\r\n            .then(response =>{\r\n\r\n                const { data } = response\r\n                const temperature = data.main.temp\r\n                const state = \"sunny\"\r\n                const propName = `${city}-${country}`\r\n                const propValue = { temperature , state }\r\n\r\n                console.log(\"[propName]\", propName)\r\n\r\n                setAllWeather(allWeather => {\r\n                    const result = { ...allWeather, [propName] : propValue }\r\n                    console.log(\"allWeather [result]\", result)\r\n                    return result\r\n\r\n                })\r\n            })\r\n            \r\n\r\n        }\r\n\r\n        cities.forEach(({ city, country, countryCode }) => {\r\n\r\n            setWeather(city, country, countryCode)\r\n                \r\n        });\r\n        \r\n        \r\n        \r\n    }, [cities])\r\n\r\n    //  const weather =  { temperature: 10, state: \"sunny\" }\r\n    return (\r\n        <List>\r\n            { \r\n                cities.map(cityAndCountry => renderCityAndCountry(onClickCity)(cityAndCountry, \r\n                    allWeather[`${cityAndCountry.city}-${cityAndCountry.country}`]))\r\n            }\r\n        </List>\r\n    )\r\n}\r\n\r\nCityList.propTypes = {\r\n\r\n    cities: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n\r\n            city: PropTypes.string.isRequired,\r\n            country: PropTypes.string.isRequired,\r\n            countryCode: PropTypes.string.isRequired,\r\n        })\r\n    ).isRequired,\r\n\r\n    onClickCity: PropTypes.func.isRequired,\r\n\r\n}\r\n\r\nexport default CityList\r\n"]},"metadata":{},"sourceType":"module"}