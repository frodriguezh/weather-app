{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport getAllWeather from '../utils/transform/getAllWeather';\nimport { getWeatherUrl } from './../utils/urls';\nimport { getCityCode } from '../utils/utils';\n\nconst useCityList = (cities, allWeather, actions) => {\n  _s();\n\n  const [error, setError] = useState();\n  useEffect(() => {\n    const setWeather = async (city, countryCode) => {\n      const url = getWeatherUrl(city, countryCode);\n\n      try {\n        const propName = getCityCode(city, countryCode);\n        actions({\n          type: \"SET_ALL_WEATHER\",\n          payload: {\n            [propName]: {}\n          }\n        });\n        const response = await axios.get(url);\n        const allWeatherAux = getAllWeather(response, city, countryCode);\n        actions({\n          type: \"SET_ALL_WEATHER\",\n          payload: allWeatherAux\n        });\n      } catch (error) {\n        if (error.response) {\n          setError(\"Hay un error con el servidor\");\n        } else if (error.request) {\n          setError(\"Sin internet\");\n        } else {\n          setError(\"Ponte a rezar\");\n        }\n      }\n    };\n\n    cities.forEach(({\n      city,\n      countryCode\n    }) => {\n      if (!allWeather[getCityCode(city, countryCode)]) {\n        setWeather(city, countryCode);\n      }\n    });\n  }, [cities, actions, allWeather]);\n  return {\n    error,\n    setError\n  };\n};\n\n_s(useCityList, \"4w26CgyJWZ9C4Q3cISzoMOeyOb0=\");\n\nexport default useCityList;","map":{"version":3,"sources":["C:/Users/frodriguez/Documents/react/weather-app/src/hooks/useCityList.jsx"],"names":["useState","useEffect","axios","getAllWeather","getWeatherUrl","getCityCode","useCityList","cities","allWeather","actions","error","setError","setWeather","city","countryCode","url","propName","type","payload","response","get","allWeatherAux","request","forEach"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,kCAA1B;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,WAAT,QAA4B,gBAA5B;;AAIA,MAAMC,WAAW,GAAG,CAACC,MAAD,EAASC,UAAT,EAAqBC,OAArB,KAAiC;AAAA;;AAEjD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,EAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AAEZ,UAAMW,UAAU,GAAG,OAAOC,IAAP,EAAaC,WAAb,KAA6B;AAE5C,YAAMC,GAAG,GAAGX,aAAa,CAACS,IAAD,EAAOC,WAAP,CAAzB;;AACA,UAAI;AAEA,cAAME,QAAQ,GAAGX,WAAW,CAACQ,IAAD,EAAOC,WAAP,CAA5B;AAEAL,QAAAA,OAAO,CAAC;AAAEQ,UAAAA,IAAI,EAAE,iBAAR;AAA2BC,UAAAA,OAAO,EAAE;AAAE,aAACF,QAAD,GAAY;AAAd;AAApC,SAAD,CAAP;AAEA,cAAMG,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,GAAN,CAAUL,GAAV,CAAvB;AAEA,cAAMM,aAAa,GAAGlB,aAAa,CAACgB,QAAD,EAAWN,IAAX,EAAiBC,WAAjB,CAAnC;AAEAL,QAAAA,OAAO,CAAC;AAAEQ,UAAAA,IAAI,EAAE,iBAAR;AAA2BC,UAAAA,OAAO,EAAEG;AAApC,SAAD,CAAP;AAEH,OAZD,CAYE,OAAOX,KAAP,EAAc;AAEZ,YAAGA,KAAK,CAACS,QAAT,EAAkB;AAEdR,UAAAA,QAAQ,CAAC,8BAAD,CAAR;AAEH,SAJD,MAIM,IAAGD,KAAK,CAACY,OAAT,EAAiB;AAEnBX,UAAAA,QAAQ,CAAC,cAAD,CAAR;AAEH,SAJK,MAID;AAEDA,UAAAA,QAAQ,CAAC,eAAD,CAAR;AACH;AAGJ;AAEJ,KAjCD;;AAmCAJ,IAAAA,MAAM,CAACgB,OAAP,CAAe,CAAC;AAAEV,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAD,KAA2B;AAEtC,UAAG,CAACN,UAAU,CAACH,WAAW,CAACQ,IAAD,EAAOC,WAAP,CAAZ,CAAd,EAA+C;AAC3CF,QAAAA,UAAU,CAACC,IAAD,EAAOC,WAAP,CAAV;AACH;AAGJ,KAPD;AAWH,GAhDQ,EAgDN,CAACP,MAAD,EAASE,OAAT,EAAkBD,UAAlB,CAhDM,CAAT;AAkDA,SAAO;AAAGE,IAAAA,KAAH;AAAUC,IAAAA;AAAV,GAAP;AACH,CAvDD;;GAAML,W;;AAyDN,eAAeA,WAAf","sourcesContent":["import { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport getAllWeather from '../utils/transform/getAllWeather'\r\nimport { getWeatherUrl } from './../utils/urls'\r\nimport { getCityCode } from '../utils/utils'\r\n\r\n\r\n\r\nconst useCityList = (cities, allWeather, actions) => {\r\n\r\n    const [error, setError] = useState()\r\n\r\n    useEffect(() => {\r\n\r\n        const setWeather = async (city, countryCode) => {\r\n\r\n            const url = getWeatherUrl(city, countryCode)\r\n            try {\r\n\r\n                const propName = getCityCode(city, countryCode)\r\n                \r\n                actions({ type: \"SET_ALL_WEATHER\", payload: { [propName]: {} } })\r\n\r\n                const response = await axios.get(url)\r\n\r\n                const allWeatherAux = getAllWeather(response, city, countryCode)\r\n                \r\n                actions({ type: \"SET_ALL_WEATHER\", payload: allWeatherAux })\r\n                    \r\n            } catch (error) {\r\n\r\n                if(error.response){\r\n\r\n                    setError(\"Hay un error con el servidor\")\r\n    \r\n                }else if(error.request){\r\n    \r\n                    setError(\"Sin internet\")\r\n    \r\n                }else{\r\n    \r\n                    setError(\"Ponte a rezar\")\r\n                }\r\n    \r\n                \r\n            }   \r\n            \r\n        }\r\n\r\n        cities.forEach(({ city, countryCode }) => {\r\n\r\n            if(!allWeather[getCityCode(city, countryCode)]){\r\n                setWeather(city, countryCode)\r\n            }\r\n            \r\n                \r\n        });\r\n        \r\n        \r\n        \r\n    }, [cities, actions, allWeather])\r\n\r\n    return {  error, setError }\r\n}\r\n\r\nexport default useCityList"]},"metadata":{},"sourceType":"module"}