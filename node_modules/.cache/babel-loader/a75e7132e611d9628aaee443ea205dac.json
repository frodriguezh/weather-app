{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\frodriguez\\\\Documents\\\\react\\\\weather-app\\\\src\\\\pages\\\\CityPage.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo, useContext } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport AppFrame from '../components/AppFrame/AppFrame';\nimport CityInfo from './../components/CityInfo';\nimport Weather from './../components/Weather';\nimport WheaterDetails from './../components/WheaterDetails';\nimport Forecast from './../components/Forecast';\nimport ForecastChart from './../components/ForecastChart';\nimport useCityPage from './../hooks/useCityPage';\nimport useCityList from '../hooks/useCityList';\nimport { getCityCode } from '../utils/utils';\nimport { getCountryNameByCountryCode } from '../utils/serviceCities';\nimport { WeatherStateContext, WeatherDispatchContext } from '../../WeatherContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CityPage = () => {\n  _s();\n\n  const actions = useContext(WeatherDispatchContext);\n  const data = useContext(WeatherStateContext);\n  const {\n    allWeather,\n    allChartData,\n    allForecastItemList\n  } = data;\n  const {\n    city,\n    countryCode\n  } = useCityPage(allChartData, allForecastItemList, actions);\n  const cities = useMemo(() => [{\n    city,\n    countryCode\n  }], [city, countryCode]);\n  useCityList(cities, allWeather, actions);\n  const cityCode = getCityCode(city, countryCode);\n  const weather = allWeather[cityCode];\n  const chartData = allChartData[cityCode];\n  const forecastItemList = allForecastItemList[cityCode];\n  const country = countryCode && getCountryNameByCountryCode(countryCode);\n  const state = weather && weather.state;\n  const temperature = weather && weather.temperature;\n  const humidity = weather && weather.humidity;\n  const wind = weather && weather.wind;\n  return /*#__PURE__*/_jsxDEV(AppFrame, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      justifyContent: \"space-around\",\n      direction: \"column\",\n      spacing: 2,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        container: true,\n        xs: 12,\n        justifyContent: \"center\",\n        alignItems: \"flex-end\",\n        children: /*#__PURE__*/_jsxDEV(CityInfo, {\n          city: city,\n          country: country\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        item: true,\n        xs: 12,\n        justifyContent: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(Weather, {\n          temperature: temperature,\n          state: state\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this), humidity && wind && /*#__PURE__*/_jsxDEV(WheaterDetails, {\n          humidity: humidity,\n          wind: wind\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: !chartData && !forecastItemList && /*#__PURE__*/_jsxDEV(LinearProgress, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 57\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: chartData && /*#__PURE__*/_jsxDEV(ForecastChart, {\n          data: chartData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 36\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: forecastItemList && /*#__PURE__*/_jsxDEV(Forecast, {\n          forecastItemList: forecastItemList\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 43\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CityPage, \"1JJwQaUpK73IjSz0NxPMY5FDSWo=\", false, function () {\n  return [useCityPage, useCityList];\n});\n\n_c = CityPage;\nexport default CityPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"CityPage\");","map":{"version":3,"sources":["C:/Users/frodriguez/Documents/react/weather-app/src/pages/CityPage.jsx"],"names":["React","useMemo","useContext","Grid","LinearProgress","AppFrame","CityInfo","Weather","WheaterDetails","Forecast","ForecastChart","useCityPage","useCityList","getCityCode","getCountryNameByCountryCode","WeatherStateContext","WeatherDispatchContext","CityPage","actions","data","allWeather","allChartData","allForecastItemList","city","countryCode","cities","cityCode","weather","chartData","forecastItemList","country","state","temperature","humidity","wind"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,OAAf,EAAuBC,UAAvB,QAAwC,OAAxC;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,cAAP,MAA4B,kCAA5B;AACA,OAAOC,QAAP,MAAqB,iCAArB;AACA,OAAOC,QAAP,MAAqB,0BAArB;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,cAAP,MAA2B,gCAA3B;AACA,OAAOC,QAAP,MAAqB,0BAArB;AACA,OAAOC,aAAP,MAA0B,+BAA1B;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,2BAAT,QAA4C,wBAA5C;AACA,SAASC,mBAAT,EAA8BC,sBAA9B,QAA2D,sBAA3D;;AAEA,OAAO,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AAE1B,QAAMC,OAAO,GAAGhB,UAAU,CAACc,sBAAD,CAA1B;AACA,QAAMG,IAAI,GAAGjB,UAAU,CAACa,mBAAD,CAAvB;AAEA,QAAM;AAAEK,IAAAA,UAAF;AAAcC,IAAAA,YAAd;AAA4BC,IAAAA;AAA5B,MAAoDH,IAA1D;AAEA,QAAM;AAAEI,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAwBb,WAAW,CAACU,YAAD,EAAeC,mBAAf,EAAoCJ,OAApC,CAAzC;AAEA,QAAMO,MAAM,GAAGxB,OAAO,CAAC,MAAO,CAAC;AAACsB,IAAAA,IAAD;AAAOC,IAAAA;AAAP,GAAD,CAAR,EAAgC,CAACD,IAAD,EAAOC,WAAP,CAAhC,CAAtB;AAEAZ,EAAAA,WAAW,CAACa,MAAD,EAASL,UAAT,EAAqBF,OAArB,CAAX;AAEA,QAAMQ,QAAQ,GAAGb,WAAW,CAACU,IAAD,EAAOC,WAAP,CAA5B;AAEA,QAAMG,OAAO,GAAGP,UAAU,CAACM,QAAD,CAA1B;AAEA,QAAME,SAAS,GAAGP,YAAY,CAACK,QAAD,CAA9B;AAEA,QAAMG,gBAAgB,GAAGP,mBAAmB,CAACI,QAAD,CAA5C;AAEA,QAAMI,OAAO,GAAGN,WAAW,IAAIV,2BAA2B,CAACU,WAAD,CAA1D;AACA,QAAMO,KAAK,GAAGJ,OAAO,IAAIA,OAAO,CAACI,KAAjC;AAEA,QAAMC,WAAW,GAAGL,OAAO,IAAIA,OAAO,CAACK,WAAvC;AAEA,QAAMC,QAAQ,GAAGN,OAAO,IAAIA,OAAO,CAACM,QAApC;AAEA,QAAMC,IAAI,GAAGP,OAAO,IAAIA,OAAO,CAACO,IAAhC;AAEA,sBACI,QAAC,QAAD;AAAA,2BACI,QAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AACA,MAAA,cAAc,EAAC,cADf;AAEA,MAAA,SAAS,EAAC,QAFV;AAGA,MAAA,OAAO,EAAE,CAHT;AAAA,8BAKI,QAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,SAAS,MAApB;AACI,QAAA,EAAE,EAAE,EADR;AAEI,QAAA,cAAc,EAAC,QAFnB;AAGI,QAAA,UAAU,EAAC,UAHf;AAAA,+BAII,QAAC,QAAD;AAAU,UAAA,IAAI,EAAEX,IAAhB;AAAsB,UAAA,OAAO,EAAEO;AAA/B;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,cALJ,eAYI,QAAC,IAAD;AAAM,QAAA,SAAS,MAAf;AAAgB,QAAA,IAAI,MAApB;AACI,QAAA,EAAE,EAAE,EADR;AAEI,QAAA,cAAc,EAAC,QAFnB;AAAA,gCAGI,QAAC,OAAD;AAAS,UAAA,WAAW,EAAEE,WAAtB;AAAmC,UAAA,KAAK,EAAED;AAA1C;AAAA;AAAA;AAAA;AAAA,gBAHJ,EAMQE,QAAQ,IAAIC,IAAZ,iBACA,QAAC,cAAD;AACI,UAAA,QAAQ,EAAED,QADd;AAEI,UAAA,IAAI,EAAGC;AAFX;AAAA;AAAA;AAAA;AAAA,gBAPR;AAAA;AAAA;AAAA;AAAA;AAAA,cAZJ,eA2BI,QAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAA,kBACM,CAACN,SAAD,IAAc,CAACC,gBAAf,iBAAkC,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AADxC;AAAA;AAAA;AAAA;AAAA,cA3BJ,eAgCI,QAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAA,kBACMD,SAAS,iBAAI,QAAC,aAAD;AAAe,UAAA,IAAI,EAAEA;AAArB;AAAA;AAAA;AAAA;AAAA;AADnB;AAAA;AAAA;AAAA;AAAA,cAhCJ,eAoCI,QAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAA,kBACMC,gBAAgB,iBAAI,QAAC,QAAD;AAAU,UAAA,gBAAgB,EAAIA;AAA9B;AAAA;AAAA;AAAA;AAAA;AAD1B;AAAA;AAAA;AAAA;AAAA,cApCJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AA8CH,CA5EM;;GAAMZ,Q;UAOqBN,W,EAI9BC,W;;;KAXSK,Q;AA8Eb,eAAeA,QAAf","sourcesContent":["import React, {useMemo,useContext} from 'react'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport LinearProgress  from '@material-ui/core/LinearProgress'\r\nimport AppFrame from '../components/AppFrame/AppFrame'\r\nimport CityInfo from './../components/CityInfo'\r\nimport Weather from './../components/Weather'\r\nimport WheaterDetails from './../components/WheaterDetails'\r\nimport Forecast from './../components/Forecast'\r\nimport ForecastChart from './../components/ForecastChart'\r\nimport useCityPage from './../hooks/useCityPage'\r\nimport useCityList from '../hooks/useCityList'\r\nimport { getCityCode } from '../utils/utils'\r\nimport { getCountryNameByCountryCode } from '../utils/serviceCities'\r\nimport { WeatherStateContext, WeatherDispatchContext} from '../../WeatherContext'\r\n\r\nexport const CityPage = () => {\r\n\r\n    const actions = useContext(WeatherDispatchContext)\r\n    const data = useContext(WeatherStateContext)\r\n\r\n    const { allWeather, allChartData, allForecastItemList } = data\r\n\r\n    const { city, countryCode } = useCityPage(allChartData, allForecastItemList, actions)\r\n\r\n    const cities = useMemo(() => ([{city, countryCode}]), [city, countryCode])\r\n\r\n    useCityList(cities, allWeather, actions)\r\n\r\n    const cityCode = getCityCode(city, countryCode)\r\n\r\n    const weather = allWeather[cityCode]\r\n\r\n    const chartData = allChartData[cityCode]\r\n\r\n    const forecastItemList = allForecastItemList[cityCode]\r\n\r\n    const country = countryCode && getCountryNameByCountryCode(countryCode)\r\n    const state = weather && weather.state\r\n\r\n    const temperature = weather && weather.temperature\r\n\r\n    const humidity = weather && weather.humidity\r\n\r\n    const wind = weather && weather.wind\r\n\r\n    return (\r\n        <AppFrame>\r\n            <Grid container\r\n            justifyContent=\"space-around\"\r\n            direction=\"column\"\r\n            spacing={2}>\r\n\r\n                <Grid item container \r\n                    xs={12}\r\n                    justifyContent=\"center\"\r\n                    alignItems=\"flex-end\">\r\n                    <CityInfo city={city} country={country}/>\r\n                </Grid>\r\n\r\n                <Grid container item \r\n                    xs={12}\r\n                    justifyContent=\"center\">\r\n                    <Weather temperature={temperature} state={state} />\r\n\r\n                    {\r\n                        humidity && wind && \r\n                        <WheaterDetails \r\n                            humidity={humidity} \r\n                            wind= {wind}/>\r\n                    \r\n                    }\r\n    \r\n                </Grid>\r\n\r\n                <Grid item>\r\n                    { !chartData && !forecastItemList &&<LinearProgress/> }\r\n\r\n                </Grid>\r\n\r\n                <Grid item>\r\n                    { chartData && <ForecastChart data={chartData}/> }\r\n                </Grid>\r\n\r\n                <Grid item>\r\n                    { forecastItemList && <Forecast forecastItemList = {forecastItemList}/> }\r\n                </Grid>\r\n\r\n            </Grid>\r\n        </AppFrame>\r\n        \r\n    )\r\n}\r\n\r\nexport default CityPage"]},"metadata":{},"sourceType":"module"}