{"ast":null,"code":"var _jsxFileName = \"E:\\\\react\\\\weather-app\\\\src\\\\components\\\\Forecast\\\\Forecast.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport ForecastItem from './../ForecastItem';\nimport { validValues } from './../IconState';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst renderForecastItem = forecast => {\n  const {\n    weekDay,\n    hour,\n    state,\n    temperature\n  } = forecast; // Hay que poner un identificador único\n  // Vamos a poner una \"marca\" para encontrar cada item (ForecastItem)\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    \"data-testid\": \"forecast-item-container\",\n    item: true,\n    children: /*#__PURE__*/_jsxDEV(ForecastItem, {\n      hour: hour,\n      weekDay: weekDay,\n      state: state,\n      temperature: temperature\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }, this)\n  }, `${weekDay}${hour}`, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 9\n  }, this);\n};\n\nconst Forecast = ({\n  forecastItemList\n}) => {\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    justify: \"space-around\",\n    alignItems: \"center\",\n    children: forecastItemList.map(forecast => renderForecastItem(forecast))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n}; // forecastItemList es un array de elementos\n// los elementos deben tener una \"forma\" en particular\n// las siguientes propiedades:\n\n/*\r\n    weekDay: PropTypes.string.isRequired,\r\n    hour: PropTypes.number.isRequired,\r\n    state: PropTypes.oneOf(validValues).isRequired,\r\n    temperature: PropTypes.number.isRequired,\r\n*/\n\n\n_c = Forecast;\nForecast.propTypes = {\n  forecastItemList: PropTypes.arrayOf(PropTypes.shape({\n    weekDay: PropTypes.string.isRequired,\n    hour: PropTypes.number.isRequired,\n    state: PropTypes.oneOf(validValues).isRequired,\n    temperature: PropTypes.number.isRequired\n  })).isRequired\n};\nForecast.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"Forecast\",\n  \"props\": {\n    \"forecastItemList\": {\n      \"type\": {\n        \"name\": \"arrayOf\",\n        \"value\": {\n          \"name\": \"shape\",\n          \"value\": {\n            \"weekDay\": {\n              \"name\": \"string\",\n              \"required\": true\n            },\n            \"hour\": {\n              \"name\": \"number\",\n              \"required\": true\n            },\n            \"state\": {\n              \"name\": \"enum\",\n              \"computed\": true,\n              \"value\": \"validValues\",\n              \"required\": true\n            },\n            \"temperature\": {\n              \"name\": \"number\",\n              \"required\": true\n            }\n          }\n        }\n      },\n      \"required\": true,\n      \"description\": \"\"\n    }\n  }\n};\nexport default Forecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"Forecast\");\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\components\\\\Forecast\\\\Forecast.jsx\"] = {\n    name: \"Forecast\",\n    docgenInfo: Forecast.__docgenInfo,\n    path: \"src\\\\components\\\\Forecast\\\\Forecast.jsx\"\n  };\n}","map":{"version":3,"sources":["E:/react/weather-app/src/components/Forecast/Forecast.jsx"],"names":["React","PropTypes","Grid","ForecastItem","validValues","renderForecastItem","forecast","weekDay","hour","state","temperature","Forecast","forecastItemList","map","propTypes","arrayOf","shape","string","isRequired","number","oneOf"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,SAASC,WAAT,QAA4B,gBAA5B;;;AAEA,MAAMC,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,IAAX;AAAiBC,IAAAA,KAAjB;AAAwBC,IAAAA;AAAxB,MAAwCJ,QAA9C,CADmC,CAEnC;AACA;;AACA,sBACI,QAAC,IAAD;AACI,mBAAY,yBADhB;AAEI,IAAA,IAAI,MAFR;AAAA,2BAGI,QAAC,YAAD;AACI,MAAA,IAAI,EAAEE,IADV;AAEI,MAAA,OAAO,EAAED,OAFb;AAGI,MAAA,KAAK,EAAEE,KAHX;AAII,MAAA,WAAW,EAAEC;AAJjB;AAAA;AAAA;AAAA;AAAA;AAHJ,KAEe,GAAEH,OAAQ,GAAEC,IAAK,EAFhC;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH,CAhBD;;AAkBA,MAAMG,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAA0B;AACvC,sBACI,QAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AACI,IAAA,OAAO,EAAC,cADZ;AAEI,IAAA,UAAU,EAAC,QAFf;AAAA,cAIQA,gBAAgB,CAACC,GAAjB,CAAqBP,QAAQ,IAAID,kBAAkB,CAACC,QAAD,CAAnD;AAJR;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,CAVD,C,CAYA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;;KApBMK,Q;AAqBNA,QAAQ,CAACG,SAAT,GAAqB;AACjBF,EAAAA,gBAAgB,EAAEX,SAAS,CAACc,OAAV,CAAkBd,SAAS,CAACe,KAAV,CAAgB;AAChDT,IAAAA,OAAO,EAAEN,SAAS,CAACgB,MAAV,CAAiBC,UADsB;AAEhDV,IAAAA,IAAI,EAAEP,SAAS,CAACkB,MAAV,CAAiBD,UAFyB;AAGhDT,IAAAA,KAAK,EAAER,SAAS,CAACmB,KAAV,CAAgBhB,WAAhB,EAA6Bc,UAHY;AAIhDR,IAAAA,WAAW,EAAET,SAAS,CAACkB,MAAV,CAAiBD;AAJkB,GAAhB,CAAlB,EAKdA;AANa,CAArB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA,eAAeP,QAAf","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport ForecastItem from './../ForecastItem'\r\nimport { validValues } from './../IconState'\r\n\r\nconst renderForecastItem = forecast => {\r\n    const { weekDay, hour, state, temperature } = forecast\r\n    // Hay que poner un identificador único\r\n    // Vamos a poner una \"marca\" para encontrar cada item (ForecastItem)\r\n    return (\r\n        <Grid \r\n            data-testid=\"forecast-item-container\" \r\n            item key={`${weekDay}${hour}`}>\r\n            <ForecastItem \r\n                hour={hour}\r\n                weekDay={weekDay}\r\n                state={state}\r\n                temperature={temperature}\r\n            ></ForecastItem>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nconst Forecast = ({ forecastItemList }) => {\r\n    return (\r\n        <Grid container\r\n            justify=\"space-around\"\r\n            alignItems=\"center\">\r\n            {\r\n                forecastItemList.map(forecast => renderForecastItem(forecast))\r\n            }\r\n        </Grid>\r\n    )\r\n}\r\n\r\n// forecastItemList es un array de elementos\r\n// los elementos deben tener una \"forma\" en particular\r\n// las siguientes propiedades:\r\n/*\r\n    weekDay: PropTypes.string.isRequired,\r\n    hour: PropTypes.number.isRequired,\r\n    state: PropTypes.oneOf(validValues).isRequired,\r\n    temperature: PropTypes.number.isRequired,\r\n*/\r\nForecast.propTypes = {\r\n    forecastItemList: PropTypes.arrayOf(PropTypes.shape({\r\n        weekDay: PropTypes.string.isRequired,\r\n        hour: PropTypes.number.isRequired,\r\n        state: PropTypes.oneOf(validValues).isRequired,\r\n        temperature: PropTypes.number.isRequired,        \r\n    })).isRequired,\r\n}\r\n\r\nexport default Forecast"]},"metadata":{},"sourceType":"module"}