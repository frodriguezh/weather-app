{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from 'react';\nimport axios from 'axios';\nimport convertUnits from 'convert-units';\n\nconst useCityList = cities => {\n  _s();\n\n  const [allWeather, setAllWeather] = useState({});\n  const [error, setError] = useState();\n  useEffect(() => {\n    const setWeather = async (city, countryCode) => {\n      const appid = \"811bed139763af7e4f3428e936ed75fb\";\n      const url = `https://api.openweathermap.org/data/2.5/weather?q=${city},${countryCode}&appid=${appid}`;\n\n      try {\n        const response = await axios.get(url);\n        const {\n          data\n        } = response;\n        const temperature = Number(convertUnits(data.main.temp).from(\"K\").to(\"C\").toFixed(0));\n        const state = data.weather[0].main.toLowerCase();\n        const propName = getCityCode(city, countryCode);\n        const propValue = {\n          temperature,\n          state\n        };\n        setAllWeather(allWeather => {\n          const result = { ...allWeather,\n            [propName]: propValue\n          };\n          return result;\n        });\n      } catch (error) {\n        if (error.response) {\n          setError(\"Hay un error con el servidor\");\n        } else if (error.request) {\n          setError(\"Sin internet\");\n        } else {\n          setError(\"Ponte a rezar\");\n        }\n      }\n    };\n\n    cities.forEach(({\n      city,\n      countryCode\n    }) => {\n      setWeather(city, countryCode);\n    });\n  }, [cities]);\n  return {\n    allWeather,\n    error,\n    setError\n  };\n};\n\n_s(useCityList, \"Np8lHz/1TqUHJA1rf43+prngUiA=\");\n\nexport default useCityList;","map":{"version":3,"sources":["C:/Users/frodriguez/Documents/react/weather-app/src/hooks/useCityList.jsx"],"names":["React","axios","convertUnits","useCityList","cities","allWeather","setAllWeather","useState","error","setError","useEffect","setWeather","city","countryCode","appid","url","response","get","data","temperature","Number","main","temp","from","to","toFixed","state","weather","toLowerCase","propName","getCityCode","propValue","result","request","forEach"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,eAAzB;;AAEA,MAAMC,WAAW,GAAIC,MAAD,IAAY;AAAA;;AAE5B,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BC,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBF,QAAQ,EAAlC;AAEAG,EAAAA,SAAS,CAAC,MAAM;AAEZ,UAAMC,UAAU,GAAG,OAAOC,IAAP,EAAaC,WAAb,KAA6B;AAE5C,YAAMC,KAAK,GAAG,kCAAd;AACA,YAAMC,GAAG,GAAI,qDAAoDH,IAAK,IAAGC,WAAY,UAASC,KAAM,EAApG;;AAEA,UAAI;AAEA,cAAME,QAAQ,GAAG,MAAMf,KAAK,CAACgB,GAAN,CAAUF,GAAV,CAAvB;AACA,cAAM;AAAEG,UAAAA;AAAF,YAAWF,QAAjB;AACA,cAAMG,WAAW,GAAGC,MAAM,CAAClB,YAAY,CAACgB,IAAI,CAACG,IAAL,CAAUC,IAAX,CAAZ,CAA6BC,IAA7B,CAAkC,GAAlC,EAAuCC,EAAvC,CAA0C,GAA1C,EAA+CC,OAA/C,CAAuD,CAAvD,CAAD,CAA1B;AACA,cAAMC,KAAK,GAAGR,IAAI,CAACS,OAAL,CAAa,CAAb,EAAgBN,IAAhB,CAAqBO,WAArB,EAAd;AACA,cAAMC,QAAQ,GAAGC,WAAW,CAAClB,IAAD,EAAOC,WAAP,CAA5B;AACA,cAAMkB,SAAS,GAAG;AAAEZ,UAAAA,WAAF;AAAgBO,UAAAA;AAAhB,SAAlB;AAEApB,QAAAA,aAAa,CAACD,UAAU,IAAI;AACxB,gBAAM2B,MAAM,GAAG,EAAE,GAAG3B,UAAL;AAAiB,aAACwB,QAAD,GAAaE;AAA9B,WAAf;AACA,iBAAOC,MAAP;AAEH,SAJY,CAAb;AAMH,OAfD,CAeE,OAAOxB,KAAP,EAAc;AAEZ,YAAGA,KAAK,CAACQ,QAAT,EAAkB;AAEdP,UAAAA,QAAQ,CAAC,8BAAD,CAAR;AAEH,SAJD,MAIM,IAAGD,KAAK,CAACyB,OAAT,EAAiB;AAEnBxB,UAAAA,QAAQ,CAAC,cAAD,CAAR;AAEH,SAJK,MAID;AAEDA,UAAAA,QAAQ,CAAC,eAAD,CAAR;AACH;AAGJ;AAEJ,KAtCD;;AAwCAL,IAAAA,MAAM,CAAC8B,OAAP,CAAe,CAAC;AAAEtB,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAD,KAA2B;AAEtCF,MAAAA,UAAU,CAACC,IAAD,EAAOC,WAAP,CAAV;AAEH,KAJD;AAQH,GAlDQ,EAkDN,CAACT,MAAD,CAlDM,CAAT;AAoDA,SAAO;AAAEC,IAAAA,UAAF;AAAcG,IAAAA,KAAd;AAAqBC,IAAAA;AAArB,GAAP;AACH,CA1DD;;GAAMN,W;;AA4DN,eAAeA,WAAf","sourcesContent":["import React from 'react'\r\nimport axios from 'axios'\r\nimport convertUnits from 'convert-units'\r\n\r\nconst useCityList = (cities) => {\r\n\r\n    const [allWeather, setAllWeather] = useState({})\r\n    const [error, setError] = useState()\r\n\r\n    useEffect(() => {\r\n\r\n        const setWeather = async (city, countryCode) => {\r\n\r\n            const appid = \"811bed139763af7e4f3428e936ed75fb\"\r\n            const url = `https://api.openweathermap.org/data/2.5/weather?q=${city},${countryCode}&appid=${appid}`\r\n\r\n            try {\r\n\r\n                const response = await axios.get(url)\r\n                const { data } = response\r\n                const temperature = Number(convertUnits(data.main.temp).from(\"K\").to(\"C\").toFixed(0))\r\n                const state = data.weather[0].main.toLowerCase()\r\n                const propName = getCityCode(city, countryCode)\r\n                const propValue = { temperature , state }\r\n\r\n                setAllWeather(allWeather => {\r\n                    const result = { ...allWeather, [propName] : propValue }\r\n                    return result\r\n\r\n                })\r\n                    \r\n            } catch (error) {\r\n\r\n                if(error.response){\r\n\r\n                    setError(\"Hay un error con el servidor\")\r\n    \r\n                }else if(error.request){\r\n    \r\n                    setError(\"Sin internet\")\r\n    \r\n                }else{\r\n    \r\n                    setError(\"Ponte a rezar\")\r\n                }\r\n    \r\n                \r\n            }   \r\n            \r\n        }\r\n\r\n        cities.forEach(({ city, countryCode }) => {\r\n\r\n            setWeather(city, countryCode)\r\n                \r\n        });\r\n        \r\n        \r\n        \r\n    }, [cities])\r\n\r\n    return { allWeather, error, setError }\r\n}\r\n\r\nexport default useCityList"]},"metadata":{},"sourceType":"module"}