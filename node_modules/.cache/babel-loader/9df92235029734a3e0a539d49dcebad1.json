{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport getAllWeather from '../utils/transform/getAllWeather';\nimport { getWeatherUrl } from './../utils/urls';\n\nconst useCityList = cities => {\n  _s();\n\n  const [allWeather, setAllWeather] = useState({});\n  const [error, setError] = useState();\n  useEffect(() => {\n    const setWeather = async (city, countryCode) => {\n      const url = getWeatherUrl(city, countryCode);\n\n      try {\n        const response = await axios.get(url);\n        const allWeatherAux = getAllWeather(response, city, countryCode);\n        setAllWeather(allWeather => ({ ...allWeather,\n          ...allWeatherAux\n        }));\n      } catch (error) {\n        if (error.response) {\n          setError(\"Hay un error con el servidor\");\n        } else if (error.request) {\n          setError(\"Sin internet\");\n        } else {\n          setError(\"Ponte a rezar\");\n        }\n      }\n    };\n\n    cities.forEach(({\n      city,\n      countryCode\n    }) => {\n      setWeather(city, countryCode);\n    });\n  }, [cities]);\n  return {\n    allWeather,\n    error,\n    setError\n  };\n};\n\n_s(useCityList, \"Np8lHz/1TqUHJA1rf43+prngUiA=\");\n\nexport default useCityList;","map":{"version":3,"sources":["C:/Users/frodriguez/Documents/react/weather-app/src/hooks/useCityList.jsx"],"names":["useState","useEffect","axios","getAllWeather","getWeatherUrl","useCityList","cities","allWeather","setAllWeather","error","setError","setWeather","city","countryCode","url","response","get","allWeatherAux","request","forEach"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,kCAA1B;AACA,SAASC,aAAT,QAA8B,iBAA9B;;AAIA,MAAMC,WAAW,GAAIC,MAAD,IAAY;AAAA;;AAE5B,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,EAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AAEZ,UAAMU,UAAU,GAAG,OAAOC,IAAP,EAAaC,WAAb,KAA6B;AAE5C,YAAMC,GAAG,GAAGV,aAAa,CAACQ,IAAD,EAAOC,WAAP,CAAzB;;AACA,UAAI;AAEA,cAAME,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAN,CAAUF,GAAV,CAAvB;AAEA,cAAMG,aAAa,GAAGd,aAAa,CAACY,QAAD,EAAWH,IAAX,EAAiBC,WAAjB,CAAnC;AAGAL,QAAAA,aAAa,CAACD,UAAU,KAAM,EAAC,GAAGA,UAAJ;AAAgB,aAAGU;AAAnB,SAAN,CAAX,CAAb;AAGH,OAVD,CAUE,OAAOR,KAAP,EAAc;AAEZ,YAAGA,KAAK,CAACM,QAAT,EAAkB;AAEdL,UAAAA,QAAQ,CAAC,8BAAD,CAAR;AAEH,SAJD,MAIM,IAAGD,KAAK,CAACS,OAAT,EAAiB;AAEnBR,UAAAA,QAAQ,CAAC,cAAD,CAAR;AAEH,SAJK,MAID;AAEDA,UAAAA,QAAQ,CAAC,eAAD,CAAR;AACH;AAGJ;AAEJ,KA/BD;;AAiCAJ,IAAAA,MAAM,CAACa,OAAP,CAAe,CAAC;AAAEP,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAD,KAA2B;AAEtCF,MAAAA,UAAU,CAACC,IAAD,EAAOC,WAAP,CAAV;AAEH,KAJD;AAQH,GA3CQ,EA2CN,CAACP,MAAD,CA3CM,CAAT;AA6CA,SAAO;AAAEC,IAAAA,UAAF;AAAcE,IAAAA,KAAd;AAAqBC,IAAAA;AAArB,GAAP;AACH,CAnDD;;GAAML,W;;AAqDN,eAAeA,WAAf","sourcesContent":["import { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport getAllWeather from '../utils/transform/getAllWeather'\r\nimport { getWeatherUrl } from './../utils/urls'\r\n\r\n\r\n\r\nconst useCityList = (cities) => {\r\n\r\n    const [allWeather, setAllWeather] = useState({})\r\n    const [error, setError] = useState()\r\n\r\n    useEffect(() => {\r\n\r\n        const setWeather = async (city, countryCode) => {\r\n\r\n            const url = getWeatherUrl(city, countryCode)\r\n            try {\r\n                \r\n                const response = await axios.get(url)\r\n\r\n                const allWeatherAux = getAllWeather(response, city, countryCode)\r\n\r\n                \r\n                setAllWeather(allWeather =>  ({...allWeather, ...allWeatherAux }))\r\n                \r\n                    \r\n            } catch (error) {\r\n\r\n                if(error.response){\r\n\r\n                    setError(\"Hay un error con el servidor\")\r\n    \r\n                }else if(error.request){\r\n    \r\n                    setError(\"Sin internet\")\r\n    \r\n                }else{\r\n    \r\n                    setError(\"Ponte a rezar\")\r\n                }\r\n    \r\n                \r\n            }   \r\n            \r\n        }\r\n\r\n        cities.forEach(({ city, countryCode }) => {\r\n\r\n            setWeather(city, countryCode)\r\n                \r\n        });\r\n        \r\n        \r\n        \r\n    }, [cities])\r\n\r\n    return { allWeather, error, setError }\r\n}\r\n\r\nexport default useCityList"]},"metadata":{},"sourceType":"module"}