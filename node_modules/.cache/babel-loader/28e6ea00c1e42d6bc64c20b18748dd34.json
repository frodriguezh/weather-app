{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport 'moment/locale/es';\nimport { getForecastUrl } from './../utils/urls';\nimport getCharData from './../utils/transform/getChartData';\nimport getForecastItemList from '../utils/transform/getForecastItemList';\nimport { getCityCode } from '../utils/utils';\n\nconst useCityPage = (allChartData, allForecastItemList, onSetChartData, onSetForecastItemList) => {\n  _s();\n\n  const {\n    city,\n    countryCode\n  } = useParams();\n  useEffect(() => {\n    const getForecast = async () => {\n      const url = getForecastUrl(city, countryCode);\n      const cityCode = getCityCode(city, countryCode);\n\n      try {\n        const {\n          data\n        } = await axios.get(url);\n        const {\n          dataAux\n        } = getCharData(data);\n        onSetChartData({\n          [cityCode]: dataAux\n        });\n        const {\n          forecastItemListAux\n        } = getForecastItemList(data);\n        onSetForecastItemList({\n          [cityCode]: forecastItemListAux\n        });\n      } catch (error) {\n        console.log(\"error\");\n      }\n    };\n\n    const cityCode = getCityCode(city, countryCode);\n\n    if (allChartData && allForecastItemList && !allChartData[cityCode] && !allForecastItemList[cityCode]) {\n      getForecast();\n    }\n  }, [city, countryCode, onSetChartData, onSetForecastItemList]);\n  return {\n    city,\n    countryCode\n  };\n};\n\n_s(useCityPage, \"K5IKzcF800rXzW86+R9cAGqvAj8=\", false, function () {\n  return [useParams];\n});\n\nexport default useCityPage;","map":{"version":3,"sources":["C:/Users/frodriguez/Documents/react/weather-app/src/hooks/useCityPage.jsx"],"names":["useEffect","useParams","axios","getForecastUrl","getCharData","getForecastItemList","getCityCode","useCityPage","allChartData","allForecastItemList","onSetChartData","onSetForecastItemList","city","countryCode","getForecast","url","cityCode","data","get","dataAux","forecastItemListAux","error","console","log"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,kBAAP;AACA,SAASC,cAAT,QAA+B,iBAA/B;AACA,OAAOC,WAAP,MAAwB,mCAAxB;AACA,OAAOC,mBAAP,MAAgC,wCAAhC;AACA,SAASC,WAAT,QAA4B,gBAA5B;;AAIA,MAAMC,WAAW,GAAG,CAACC,YAAD,EAAeC,mBAAf,EAAoCC,cAApC,EAAoDC,qBAApD,KAA8E;AAAA;;AAG9F,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAwBZ,SAAS,EAAvC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AAEZ,UAAMc,WAAW,GAAG,YAAY;AAG5B,YAAMC,GAAG,GAAGZ,cAAc,CAACS,IAAD,EAAOC,WAAP,CAA1B;AAEA,YAAMG,QAAQ,GAAGV,WAAW,CAACM,IAAD,EAAOC,WAAP,CAA5B;;AAEA,UAAI;AAEA,cAAM;AAAEI,UAAAA;AAAF,YAAW,MAAMf,KAAK,CAACgB,GAAN,CAAUH,GAAV,CAAvB;AAEA,cAAM;AAAEI,UAAAA;AAAF,YAAef,WAAW,CAACa,IAAD,CAAhC;AAEAP,QAAAA,cAAc,CAAC;AAAC,WAACM,QAAD,GAAYG;AAAb,SAAD,CAAd;AAEA,cAAM;AAAEC,UAAAA;AAAF,YAA2Bf,mBAAmB,CAACY,IAAD,CAApD;AAEAN,QAAAA,qBAAqB,CAAC;AAAC,WAACK,QAAD,GAAYI;AAAb,SAAD,CAArB;AAEH,OAZD,CAYE,OAAOC,KAAP,EAAc;AAEZC,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACH;AAEJ,KAxBD;;AA0BA,UAAMP,QAAQ,GAAGV,WAAW,CAACM,IAAD,EAAOC,WAAP,CAA5B;;AAEA,QAAGL,YAAY,IAAIC,mBAAhB,IAAuC,CAACD,YAAY,CAACQ,QAAD,CAApD,IAAkE,CAACP,mBAAmB,CAACO,QAAD,CAAzF,EAAqG;AACjGF,MAAAA,WAAW;AACd;AAGJ,GAnCQ,EAmCN,CAACF,IAAD,EAAOC,WAAP,EAAoBH,cAApB,EAAoCC,qBAApC,CAnCM,CAAT;AAqCA,SAAO;AAAGC,IAAAA,IAAH;AAASC,IAAAA;AAAT,GAAP;AACH,CA3CD;;GAAMN,W;UAG4BN,S;;;AA0ClC,eAAeM,WAAf","sourcesContent":["import { useEffect } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport axios from 'axios'\r\nimport 'moment/locale/es'\r\nimport { getForecastUrl } from './../utils/urls'\r\nimport getCharData from './../utils/transform/getChartData'\r\nimport getForecastItemList from '../utils/transform/getForecastItemList'\r\nimport { getCityCode } from '../utils/utils'\r\n\r\n\r\n\r\nconst useCityPage = (allChartData, allForecastItemList, onSetChartData, onSetForecastItemList) => {\r\n\r\n\r\n    const { city, countryCode } = useParams()\r\n\r\n    useEffect(() => {\r\n    \r\n        const getForecast = async () => {\r\n            \r\n\r\n            const url = getForecastUrl(city, countryCode)\r\n\r\n            const cityCode = getCityCode(city, countryCode)\r\n\r\n            try {\r\n    \r\n                const { data } = await axios.get(url)\r\n\r\n                const { dataAux } =  getCharData(data)\r\n                \r\n                onSetChartData({[cityCode]: dataAux})    \r\n\r\n                const { forecastItemListAux } =  getForecastItemList(data)\r\n               \r\n                onSetForecastItemList({[cityCode]: forecastItemListAux})\r\n\r\n            } catch (error) {\r\n\r\n                console.log(\"error\")\r\n            }\r\n            \r\n        }\r\n\r\n        const cityCode = getCityCode(city, countryCode)\r\n\r\n        if(allChartData && allForecastItemList && !allChartData[cityCode] && !allForecastItemList[cityCode] ){\r\n            getForecast()\r\n        }\r\n      \r\n\r\n    }, [city, countryCode, onSetChartData, onSetForecastItemList])\r\n    \r\n    return {  city, countryCode }\r\n}\r\n\r\nexport default useCityPage"]},"metadata":{},"sourceType":"module"}