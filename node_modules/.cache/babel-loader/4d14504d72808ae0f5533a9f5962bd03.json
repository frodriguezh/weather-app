{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport moment from 'moment';\nimport 'moment/locale/es';\nimport { getForecastUrl } from './../utils/urls';\nimport { toCelsius } from './../utils/utils';\n\nconst useCityPage = () => {\n  _s();\n\n  const [chartData, setChartData] = useState(null);\n  const [forecastItemList, setForecastItemList] = useState(null);\n  const {\n    city,\n    countryCode\n  } = useParams();\n  useEffect(() => {\n    const getForecast = async () => {\n      const url = getForecastUrl(city, countryCode);\n\n      try {\n        const {\n          data\n        } = await axios.get(url);\n        const daysAhead = [0, 1, 2, 3, 4, 5];\n        const days = daysAhead.map(d => moment().add(d, 'd'));\n        const dataAux = days.map(day => {\n          const tempObjArray = data.list.filter(item => {\n            const dayOfYear = moment.unix(item.dt).dayOfYear();\n            return dayOfYear === day.dayOfYear();\n          });\n          const temps = tempObjArray.map(item => item.main.temp);\n          return {\n            \"dayHour\": day.format('ddd'),\n            \"min\": toCelsius(Math.min(...temps)),\n            \"max\": toCelsius(Math.max(...temps)),\n            hasTemps: temps.length > 0 ? true : false\n          };\n        }).filter(item => item.hasTemps);\n        setChartData(dataAux);\n        const interval = [4, 8, 12, 16, 20, 24];\n        const forecastItemListAux = data.list.filter((item, index) => interval.includes(index)).map(item => {\n          return {\n            hour: moment.unix(item.dt).hour(),\n            weekDay: moment.unix(item.dt).format('dddd'),\n            state: item.weather[0].main.toLowerCase(),\n            temperature: toCelsius(item.main.temp)\n          };\n        });\n        setForecastItemList(forecastItemListAux);\n      } catch (error) {\n        console.log(\"error\");\n      }\n    };\n\n    getForecast();\n  }, [city, countryCode]);\n  return {\n    chartData,\n    forecastItemList,\n    city\n  };\n};\n\n_s(useCityPage, \"Oq0LXJ0yq1/kUXy6RQ4H5Y/HF+A=\", false, function () {\n  return [useParams];\n});\n\nexport default useCityPage;","map":{"version":3,"sources":["C:/Users/frodriguez/Documents/react/weather-app/src/hooks/useCityPage.jsx"],"names":["useState","useEffect","useParams","axios","moment","getForecastUrl","toCelsius","useCityPage","chartData","setChartData","forecastItemList","setForecastItemList","city","countryCode","getForecast","url","data","get","daysAhead","days","map","d","add","dataAux","day","tempObjArray","list","filter","item","dayOfYear","unix","dt","temps","main","temp","format","Math","min","max","hasTemps","length","interval","forecastItemListAux","index","includes","hour","weekDay","state","weather","toLowerCase","temperature","error","console","log"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport axios from 'axios'\r\nimport moment from 'moment'\r\nimport 'moment/locale/es'\r\nimport { getForecastUrl } from './../utils/urls'\r\nimport { toCelsius } from './../utils/utils'\r\n\r\n\r\nconst useCityPage = () => {\r\n\r\n    const [chartData, setChartData] = useState(null)\r\n    const [forecastItemList, setForecastItemList] = useState(null)\r\n\r\n    const { city, countryCode } = useParams()\r\n\r\n    useEffect(() => {\r\n    \r\n        const getForecast = async () => {\r\n            \r\n\r\n            const url = getForecastUrl(city, countryCode)\r\n\r\n            try {\r\n    \r\n                const { data } = await axios.get(url)\r\n\r\n                const daysAhead = [0, 1, 2, 3, 4, 5]\r\n\r\n                const days = daysAhead.map( d => moment().add(d, 'd'))\r\n\r\n                const dataAux = days.map(day => {\r\n\r\n                    const tempObjArray =  data.list.filter(item => {\r\n\r\n                        const dayOfYear = moment.unix(item.dt).dayOfYear()\r\n                        return dayOfYear === day.dayOfYear()\r\n                    })\r\n\r\n                    const temps = tempObjArray.map(item => item.main.temp)\r\n\r\n                    return ({\r\n\r\n                        \"dayHour\": day.format('ddd'),\r\n                        \"min\": toCelsius(Math.min(...temps)),\r\n                        \"max\": toCelsius(Math.max(...temps)),\r\n                        hasTemps: (temps.length > 0 ? true : false)\r\n                    })\r\n                }).filter(item => item.hasTemps)\r\n\r\n                setChartData(dataAux)    \r\n\r\n                const interval = [4, 8, 12, 16, 20, 24]\r\n\r\n                const forecastItemListAux = data.list\r\n                .filter((item, index) => interval.includes(index))\r\n                .map(item => {\r\n                    return ({\r\n                        hour: moment.unix(item.dt).hour(),\r\n                        weekDay: moment.unix(item.dt).format('dddd'),\r\n                        state: item.weather[0].main.toLowerCase(),\r\n                        temperature: toCelsius(item.main.temp)\r\n                    })\r\n                })\r\n\r\n                setForecastItemList(forecastItemListAux)\r\n\r\n            } catch (error) {\r\n\r\n                console.log(\"error\")\r\n            }\r\n            \r\n        }\r\n\r\n        getForecast()\r\n\r\n    }, [city, countryCode])\r\n    \r\n    return { chartData, forecastItemList, city }\r\n}\r\n\r\nexport default useCityPage"]},"metadata":{},"sourceType":"module"}