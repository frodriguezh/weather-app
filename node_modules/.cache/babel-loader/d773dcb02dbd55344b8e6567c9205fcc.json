{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\frodriguez\\\\Documents\\\\react\\\\weather-app\\\\src\\\\components\\\\CityList\\\\CityList.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Alert from '@material-ui/lab/Alert';\nimport Grid from '@material-ui/core/Grid';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport useCityList from './../../hooks/useCityList';\nimport CityInfo from './../CityInfo';\nimport Weather from './../Weather';\nimport { getCityCode } from './../../utils/utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CityListItem = ({\n  city,\n  countryCode,\n  country,\n  weather,\n  eventOnClickCity\n}) => {\n  return /*#__PURE__*/_jsxDEV(ListItem, {\n    button: true,\n    onClick: () => eventOnClickCity(city, countryCode),\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 9,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(CityInfo, {\n          city: city,\n          country: country\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 10,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Weather, {\n          temperature: weather && weather.temperature,\n          state: weather && weather.state\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 9\n  }, this);\n}; //funcion que retorna otra funcion\n\n\n_c = CityListItem;\n\nconst renderCityAndCountry = eventOnClickCity => (cityAndCountry, weather) => {\n  const {\n    city,\n    countryCode\n  } = cityAndCountry;\n  return /*#__PURE__*/_jsxDEV(CityListItem, {\n    eventOnClickCity: eventOnClickCity,\n    weather: weather,\n    ...cityAndCountry\n  }, getCityCode(city, countryCode), false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 12\n  }, this);\n};\n\nconst CityList = ({\n  cities,\n  onClickCity,\n  actions,\n  data\n}) => {\n  _s();\n\n  const {\n    allWeather\n  } = data;\n  const {\n    error,\n    setError\n  } = useCityList(cities, allWeather, actions);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [error && /*#__PURE__*/_jsxDEV(Alert, {\n      onClose: () => setError(null),\n      severity: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 26\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      children: cities.map(cityAndCountry => renderCityAndCountry(onClickCity)(cityAndCountry, allWeather[getCityCode(cityAndCountry.city, cityAndCountry.countryCode)]))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CityList, \"yILzZCRIsW+HXUwNG6oQDrWcxik=\", false, function () {\n  return [useCityList];\n});\n\n_c2 = CityList;\nCityList.propTypes = {\n  cities: PropTypes.arrayOf(PropTypes.shape({\n    city: PropTypes.string.isRequired,\n    country: PropTypes.string.isRequired,\n    countryCode: PropTypes.string.isRequired\n  })).isRequired,\n  onClickCity: PropTypes.func.isRequired\n};\nexport default CityList;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CityListItem\");\n$RefreshReg$(_c2, \"CityList\");","map":{"version":3,"sources":["C:/Users/frodriguez/Documents/react/weather-app/src/components/CityList/CityList.jsx"],"names":["React","PropTypes","Alert","Grid","List","ListItem","useCityList","CityInfo","Weather","getCityCode","CityListItem","city","countryCode","country","weather","eventOnClickCity","temperature","state","renderCityAndCountry","cityAndCountry","CityList","cities","onClickCity","actions","data","allWeather","error","setError","map","propTypes","arrayOf","shape","string","isRequired","func"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Alert from '@material-ui/lab/Alert'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport List from '@material-ui/core/List'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport useCityList from './../../hooks/useCityList'\r\nimport CityInfo from './../CityInfo'\r\nimport Weather from './../Weather'\r\nimport { getCityCode } from './../../utils/utils'\r\n\r\nconst CityListItem = ({ city, countryCode, country, weather, eventOnClickCity}) => {\r\n\r\n    return (\r\n    \r\n        <ListItem \r\n            button\r\n            onClick={()=> eventOnClickCity(city, countryCode)}>\r\n            <Grid container \r\n                justifyContent=\"center\" \r\n                alignItems=\"center\">\r\n\r\n                <Grid item md={9} xs={12}>\r\n                    <CityInfo city={city} country={country} />\r\n                </Grid>\r\n                \r\n                <Grid item md={10} xs={12}>\r\n\r\n                    <Weather \r\n                    temperature = {weather && weather.temperature} \r\n                    state={weather && weather.state} />\r\n\r\n                </Grid>\r\n\r\n            </Grid>\r\n        </ListItem>\r\n        \r\n    )\r\n\r\n}\r\n\r\n\r\n//funcion que retorna otra funcion\r\nconst renderCityAndCountry = eventOnClickCity => (cityAndCountry , weather) => {\r\n\r\n    const { city, countryCode } = cityAndCountry\r\n    return <CityListItem  key={getCityCode(city, countryCode)} \r\n        eventOnClickCity={eventOnClickCity} \r\n        weather={weather} \r\n        {...cityAndCountry} />\r\n\r\n}\r\n\r\n\r\nconst CityList = ({ cities, onClickCity, actions, data }) => {\r\n\r\n    const { allWeather } = data\r\n    const { error, setError } = useCityList(cities, allWeather, actions)\r\n\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                \r\n                error && <Alert onClose={ () => setError(null)} severity=\"error\">{error}</Alert>\r\n         \r\n            }\r\n   \r\n            <List>\r\n            { \r\n                cities.map(cityAndCountry => renderCityAndCountry(onClickCity)(cityAndCountry, \r\n                    allWeather[getCityCode(cityAndCountry.city, cityAndCountry.countryCode)]))\r\n            }\r\n            </List>\r\n\r\n        </div>\r\n       \r\n    )\r\n}\r\n\r\nCityList.propTypes = {\r\n\r\n    cities: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n\r\n            city: PropTypes.string.isRequired,\r\n            country: PropTypes.string.isRequired,\r\n            countryCode: PropTypes.string.isRequired,\r\n        })\r\n    ).isRequired,\r\n\r\n    onClickCity: PropTypes.func.isRequired,\r\n\r\n}\r\n\r\nexport default CityList\r\n"]},"metadata":{},"sourceType":"module"}