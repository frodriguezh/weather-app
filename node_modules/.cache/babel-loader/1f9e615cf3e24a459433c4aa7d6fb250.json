{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport 'moment/locale/es';\nimport { getForecastUrl } from './../utils/urls';\nimport getCharData from './../utils/transform/getChartData';\nimport getForecastItemList from '../utils/transform/getForecastItemList';\nimport { getCityCode } from '../utils/utils';\n\nconst useCityPage = (onSetChartData, onSetForecastItemList) => {\n  _s();\n\n  const {\n    city,\n    countryCode\n  } = useParams();\n  useEffect(() => {\n    const getForecast = async () => {\n      const url = getForecastUrl(city, countryCode);\n      const getCityCode = getCityCode(city, countryCode);\n\n      try {\n        const {\n          data\n        } = await axios.get(url);\n        const {\n          dataAux\n        } = getCharData(data);\n        onSetChartData(dataAux);\n        const {\n          forecastItemListAux\n        } = getForecastItemList(data);\n        onSetForecastItemList(forecastItemListAux);\n      } catch (error) {\n        console.log(\"error\");\n      }\n    };\n\n    getForecast();\n  }, [city, countryCode, onSetChartData, onSetForecastItemList]);\n  return {\n    city,\n    countryCode\n  };\n};\n\n_s(useCityPage, \"K5IKzcF800rXzW86+R9cAGqvAj8=\", false, function () {\n  return [useParams];\n});\n\nexport default useCityPage;","map":{"version":3,"sources":["C:/Users/frodriguez/Documents/react/weather-app/src/hooks/useCityPage.jsx"],"names":["useEffect","useParams","axios","getForecastUrl","getCharData","getForecastItemList","getCityCode","useCityPage","onSetChartData","onSetForecastItemList","city","countryCode","getForecast","url","data","get","dataAux","forecastItemListAux","error","console","log"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,kBAAP;AACA,SAASC,cAAT,QAA+B,iBAA/B;AACA,OAAOC,WAAP,MAAwB,mCAAxB;AACA,OAAOC,mBAAP,MAAgC,wCAAhC;AACA,SAASC,WAAT,QAA4B,gBAA5B;;AAIA,MAAMC,WAAW,GAAG,CAACC,cAAD,EAAiBC,qBAAjB,KAA2C;AAAA;;AAG3D,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAwBV,SAAS,EAAvC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AAEZ,UAAMY,WAAW,GAAG,YAAY;AAG5B,YAAMC,GAAG,GAAGV,cAAc,CAACO,IAAD,EAAOC,WAAP,CAA1B;AAEA,YAAML,WAAW,GAAGA,WAAW,CAACI,IAAD,EAAOC,WAAP,CAA/B;;AAEA,UAAI;AAEA,cAAM;AAAEG,UAAAA;AAAF,YAAW,MAAMZ,KAAK,CAACa,GAAN,CAAUF,GAAV,CAAvB;AAEA,cAAM;AAAEG,UAAAA;AAAF,YAAeZ,WAAW,CAACU,IAAD,CAAhC;AAEAN,QAAAA,cAAc,CAACQ,OAAD,CAAd;AAEA,cAAM;AAAEC,UAAAA;AAAF,YAA2BZ,mBAAmB,CAACS,IAAD,CAApD;AAEAL,QAAAA,qBAAqB,CAACQ,mBAAD,CAArB;AAEH,OAZD,CAYE,OAAOC,KAAP,EAAc;AAEZC,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACH;AAEJ,KAxBD;;AA0BAR,IAAAA,WAAW;AAEd,GA9BQ,EA8BN,CAACF,IAAD,EAAOC,WAAP,EAAoBH,cAApB,EAAoCC,qBAApC,CA9BM,CAAT;AAgCA,SAAO;AAAGC,IAAAA,IAAH;AAASC,IAAAA;AAAT,GAAP;AACH,CAtCD;;GAAMJ,W;UAG4BN,S;;;AAqClC,eAAeM,WAAf","sourcesContent":["import { useEffect } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport axios from 'axios'\r\nimport 'moment/locale/es'\r\nimport { getForecastUrl } from './../utils/urls'\r\nimport getCharData from './../utils/transform/getChartData'\r\nimport getForecastItemList from '../utils/transform/getForecastItemList'\r\nimport { getCityCode } from '../utils/utils'\r\n\r\n\r\n\r\nconst useCityPage = (onSetChartData, onSetForecastItemList) => {\r\n\r\n\r\n    const { city, countryCode } = useParams()\r\n\r\n    useEffect(() => {\r\n    \r\n        const getForecast = async () => {\r\n            \r\n\r\n            const url = getForecastUrl(city, countryCode)\r\n\r\n            const getCityCode = getCityCode(city, countryCode)\r\n\r\n            try {\r\n    \r\n                const { data } = await axios.get(url)\r\n\r\n                const { dataAux } =  getCharData(data)\r\n                \r\n                onSetChartData(dataAux)    \r\n\r\n                const { forecastItemListAux } =  getForecastItemList(data)\r\n               \r\n                onSetForecastItemList(forecastItemListAux)\r\n\r\n            } catch (error) {\r\n\r\n                console.log(\"error\")\r\n            }\r\n            \r\n        }\r\n\r\n        getForecast()\r\n\r\n    }, [city, countryCode, onSetChartData, onSetForecastItemList])\r\n    \r\n    return {  city, countryCode }\r\n}\r\n\r\nexport default useCityPage"]},"metadata":{},"sourceType":"module"}