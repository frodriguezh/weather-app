{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport 'moment/locale/es';\nimport { getForecastUrl } from './../utils/urls';\nimport getCharData from './../utils/transform/getChartData';\nimport getForecastItemList from '../utils/transform/getForecastItemList';\nimport { getCityCode } from '../utils/utils';\n\nconst useCityPage = (allChartData, allForecastItemList, actions) => {\n  _s();\n\n  const {\n    city,\n    countryCode\n  } = useParams();\n  useEffect(() => {\n    const getForecast = async () => {\n      const url = getForecastUrl(city, countryCode);\n      const cityCode = getCityCode(city, countryCode);\n\n      try {\n        const {\n          data\n        } = await axios.get(url);\n        const {\n          dataAux\n        } = getCharData(data);\n        actions({\n          type: \"SET_CHART_DATA\",\n          payload: {\n            [cityCode]: dataAux\n          }\n        }); //onSetChartData({[cityCode]: dataAux})    \n\n        const {\n          forecastItemListAux\n        } = getForecastItemList(data); //actions({ type: \"SET_FORECAST_ITEM_LIST\", payload: {[cityCode]: forecastItemListAux} })\n        //onSetForecastItemList({[cityCode]: forecastItemListAux})\n      } catch (error) {\n        console.log(\"error\");\n      }\n    };\n\n    const cityCode = getCityCode(city, countryCode);\n\n    if (allChartData && allForecastItemList && !allChartData[cityCode] && !allForecastItemList[cityCode]) {\n      getForecast();\n    }\n  }, [city, countryCode, actions, allChartData, allForecastItemList]);\n  return {\n    city,\n    countryCode\n  };\n};\n\n_s(useCityPage, \"K5IKzcF800rXzW86+R9cAGqvAj8=\", false, function () {\n  return [useParams];\n});\n\nexport default useCityPage;","map":{"version":3,"sources":["C:/Users/frodriguez/Documents/react/weather-app/src/hooks/useCityPage.jsx"],"names":["useEffect","useParams","axios","getForecastUrl","getCharData","getForecastItemList","getCityCode","useCityPage","allChartData","allForecastItemList","actions","city","countryCode","getForecast","url","cityCode","data","get","dataAux","type","payload","forecastItemListAux","error","console","log"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,kBAAP;AACA,SAASC,cAAT,QAA+B,iBAA/B;AACA,OAAOC,WAAP,MAAwB,mCAAxB;AACA,OAAOC,mBAAP,MAAgC,wCAAhC;AACA,SAASC,WAAT,QAA4B,gBAA5B;;AAIA,MAAMC,WAAW,GAAG,CAACC,YAAD,EAAeC,mBAAf,EAAoCC,OAApC,KAAgD;AAAA;;AAGhE,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAwBX,SAAS,EAAvC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AAEZ,UAAMa,WAAW,GAAG,YAAY;AAE5B,YAAMC,GAAG,GAAGX,cAAc,CAACQ,IAAD,EAAOC,WAAP,CAA1B;AAEA,YAAMG,QAAQ,GAAGT,WAAW,CAACK,IAAD,EAAOC,WAAP,CAA5B;;AAEA,UAAI;AAEA,cAAM;AAAEI,UAAAA;AAAF,YAAW,MAAMd,KAAK,CAACe,GAAN,CAAUH,GAAV,CAAvB;AAEA,cAAM;AAAEI,UAAAA;AAAF,YAAed,WAAW,CAACY,IAAD,CAAhC;AAEAN,QAAAA,OAAO,CAAC;AAAES,UAAAA,IAAI,EAAE,gBAAR;AAA0BC,UAAAA,OAAO,EAAE;AAAC,aAACL,QAAD,GAAYG;AAAb;AAAnC,SAAD,CAAP,CANA,CAOA;;AAEA,cAAM;AAAEG,UAAAA;AAAF,YAA2BhB,mBAAmB,CAACW,IAAD,CAApD,CATA,CAWA;AACA;AAEH,OAdD,CAcE,OAAOM,KAAP,EAAc;AAEZC,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACH;AAEJ,KAzBD;;AA2BA,UAAMT,QAAQ,GAAGT,WAAW,CAACK,IAAD,EAAOC,WAAP,CAA5B;;AAEA,QAAGJ,YAAY,IAAIC,mBAAhB,IAAuC,CAACD,YAAY,CAACO,QAAD,CAApD,IAAkE,CAACN,mBAAmB,CAACM,QAAD,CAAzF,EAAqG;AACjGF,MAAAA,WAAW;AACd;AAGJ,GApCQ,EAoCN,CAACF,IAAD,EAAOC,WAAP,EAAoBF,OAApB,EAA6BF,YAA7B,EAA2CC,mBAA3C,CApCM,CAAT;AAsCA,SAAO;AAAGE,IAAAA,IAAH;AAASC,IAAAA;AAAT,GAAP;AACH,CA5CD;;GAAML,W;UAG4BN,S;;;AA2ClC,eAAeM,WAAf","sourcesContent":["import { useEffect } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport axios from 'axios'\r\nimport 'moment/locale/es'\r\nimport { getForecastUrl } from './../utils/urls'\r\nimport getCharData from './../utils/transform/getChartData'\r\nimport getForecastItemList from '../utils/transform/getForecastItemList'\r\nimport { getCityCode } from '../utils/utils'\r\n\r\n\r\n\r\nconst useCityPage = (allChartData, allForecastItemList, actions) => {\r\n\r\n\r\n    const { city, countryCode } = useParams()\r\n\r\n    useEffect(() => {\r\n    \r\n        const getForecast = async () => {\r\n            \r\n            const url = getForecastUrl(city, countryCode)\r\n\r\n            const cityCode = getCityCode(city, countryCode)\r\n\r\n            try {\r\n    \r\n                const { data } = await axios.get(url)\r\n\r\n                const { dataAux } =  getCharData(data)\r\n                \r\n                actions({ type: \"SET_CHART_DATA\", payload: {[cityCode]: dataAux} })\r\n                //onSetChartData({[cityCode]: dataAux})    \r\n\r\n                const { forecastItemListAux } =  getForecastItemList(data)\r\n               \r\n                //actions({ type: \"SET_FORECAST_ITEM_LIST\", payload: {[cityCode]: forecastItemListAux} })\r\n                //onSetForecastItemList({[cityCode]: forecastItemListAux})\r\n\r\n            } catch (error) {\r\n\r\n                console.log(\"error\")\r\n            }\r\n            \r\n        }\r\n\r\n        const cityCode = getCityCode(city, countryCode)\r\n\r\n        if(allChartData && allForecastItemList && !allChartData[cityCode] && !allForecastItemList[cityCode] ){\r\n            getForecast()\r\n        }\r\n      \r\n\r\n    }, [city, countryCode, actions, allChartData, allForecastItemList])\r\n    \r\n    return {  city, countryCode }\r\n}\r\n\r\nexport default useCityPage"]},"metadata":{},"sourceType":"module"}