{"version":3,"file":"main.770c951f77ebfed90ee2.hot-update.js","sources":["webpack:///./src/components/CityList/CityList.jsx","webpack:///./src/hooks/useCityList.jsx","webpack:///./src/utils/utils.jsx"],"sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Alert from '@material-ui/lab/Alert'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport List from '@material-ui/core/List'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport useCityList from './../../hooks/useCityList'\r\nimport CityInfo from './../CityInfo'\r\nimport Weather from './../Weather'\r\nimport { getCityCode } from './../../utils/utils'\r\n\r\n\r\n//funcion que retorna otra funcion\r\nconst renderCityAndCountry = eventOnClickCity => (cityAndCountry , weather) => {\r\n\r\n    const { city, countryCode, country } = cityAndCountry\r\n\r\n    return (\r\n    \r\n        <ListItem \r\n            button\r\n            key={getCityCode(city, countryCode)} \r\n            onClick={()=> eventOnClickCity(city, countryCode)}>\r\n            <Grid container \r\n                justifyContent=\"center\" \r\n                alignItems=\"center\">\r\n\r\n                <Grid item md={9} xs={12}>\r\n                    <CityInfo city={city} country={country} />\r\n                </Grid>\r\n                \r\n                <Grid item md={10} xs={12}>\r\n\r\n                    <Weather \r\n                    temperature = {weather && weather.temperature} \r\n                    state={weather && weather.state} />\r\n\r\n                </Grid>\r\n\r\n            </Grid>\r\n        </ListItem>\r\n        \r\n    )\r\n\r\n}\r\n\r\n\r\nconst CityList = ({ cities, onClickCity }) => {\r\n\r\n    const { allWeather, error, setError } = useCityList(cities)\r\n    return (\r\n        <div>\r\n            {\r\n                \r\n                error && <Alert onClose={ () => setError(null)} severity=\"error\">{error}</Alert>\r\n         \r\n            }\r\n   \r\n            <List>\r\n            { \r\n                cities.map(cityAndCountry => renderCityAndCountry(onClickCity)(cityAndCountry, \r\n                    allWeather[getCityCode(cityAndCountry.city, cityAndCountry.countryCode)]))\r\n            }\r\n            </List>\r\n\r\n        </div>\r\n       \r\n    )\r\n}\r\n\r\nCityList.propTypes = {\r\n\r\n    cities: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n\r\n            city: PropTypes.string.isRequired,\r\n            country: PropTypes.string.isRequired,\r\n            countryCode: PropTypes.string.isRequired,\r\n        })\r\n    ).isRequired,\r\n\r\n    onClickCity: PropTypes.func.isRequired,\r\n\r\n}\r\n\r\nexport default CityList\r\n","import { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport { getCityCode } from './../utils/utils'\r\nimport { getWeatherUrl } from './../utils/urls'\r\nimport { toCelsius } from  './../utils/utils'\r\n\r\n\r\nconst useCityList = (cities) => {\r\n\r\n    const [allWeather, setAllWeather] = useState({})\r\n    const [error, setError] = useState()\r\n\r\n    useEffect(() => {\r\n\r\n        const setWeather = async (city, countryCode) => {\r\n\r\n            const url = getWeatherUrl(city, countryCode)\r\n            try {\r\n                \r\n                const response = await axios.get(url)\r\n                const { data } = response\r\n                const temperature = Number(toCelsius(data.main.temp))\r\n                const state = data.weather[0].main.toLowerCase()\r\n                const propName = getCityCode(city, countryCode)\r\n                const propValue = { temperature , state }\r\n\r\n                setAllWeather(allWeather => {\r\n                    const result = { ...allWeather, [propName] : propValue }\r\n                    return result\r\n\r\n                })\r\n                    \r\n            } catch (error) {\r\n\r\n                if(error.response){\r\n\r\n                    setError(\"Hay un error con el servidor\")\r\n    \r\n                }else if(error.request){\r\n    \r\n                    setError(\"Sin internet\")\r\n    \r\n                }else{\r\n    \r\n                    setError(\"Ponte a rezar\")\r\n                }\r\n    \r\n                \r\n            }   \r\n            \r\n        }\r\n\r\n        cities.forEach(({ city, countryCode }) => {\r\n\r\n            setWeather(city, countryCode)\r\n                \r\n        });\r\n        \r\n        \r\n        \r\n    }, [cities])\r\n\r\n    return { allWeather, error, setError }\r\n}\r\n\r\nexport default useCityList","import convertUnits from 'convert-units'\r\n\r\nexport const getCityCode = ( city, countryCode) => `${city}-${countryCode}`\r\n\r\nexport const toCelsius = (temp) => Number(convertUnits(temp).from('K').to('C').toFixed(0))"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AAEA;AAHA;AAIA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAGA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AARA;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAyBA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPA;AAAA;AAAA;AAAA;AAAA;AAiBA;AACA;AAtBA;AAEA;;;AAFA;AAuBA;AAEA;AAGA;AACA;AACA;AAJA;AAQA;AAXA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAeA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtFA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AAIA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAzDA;AACA;AAyDA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClEA;AAEA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}